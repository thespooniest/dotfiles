#!/usr/bin/env bash

# Guard against non-interactive use
if [ -z "${PS1}" ] ; then
    return
fi

# Generate the proper sequence escape sequence for our variables.
generate_escape_sequence() {
    local result="\["
    local colors=$(tty -s && tput colors | tr -d "[[:space:]]")
    if [ -n $colors -a $colors -gt 1 ] ; then
        for var in "$@"; do
            result="$result$(tput ${var})"
        done
    fi
    result="${result}\]"
    echo $result
}

# Return the command status
generate_command_status() {
    if [ $? -eq 0 ] ; then
        echo "${DIMGREEN}\342\234\223${NORMAL}"
    else
        echo "${BRIGHTRED}\342\234\227${NORMAL}"
    fi
}

# Return the username, dim green if nonroot, bright red otherwise
generate_user_status() {
    if [ ${EUID} -ne 0 ] ; then
        echo "${DIMGREEN}\\u${NORMAL}"
    else
        echo "${BRIGHTRED}\\u${NORMAL}"
    fi
}

# Return the hostname in yellow: dim for local, bright for SSH
generate_host_status() {
    if [ -z "${SSH_CLIENT+x}" ] ; then
        echo "${DIMYELLOW}\\h${NORMAL}"
    else
        echo "${BRIGHTYELLOW}\\h${NORMAL}"
    fi
}

# Return the directory name: normal if relatively small, magenta if large
generate_dir_status() {
    local filecount=$(ls -1 | wc -l | tr -d "[[:space:]]")
    if [ $filecount -lt 64 ] ; then
        echo "\\W"
    else
        echo "${BRIGHTMAGENTA}\\W${NORMAL}"
    fi
}

# Return SVN directory information, if any exists.
# Based on svn-prompt
# <https://github.com/mcandre/svn-prompt/blob/master/svn-prompt.sh>
generate_svn_status() {
    local revision=$(svnversion)
    local branch=$(svn info | awk '$1 == "URL:" { print $2 }' | egrep -o '(tags|branches)/[^/]+/|trunk' | egrep -o '[^/]+$')
    local versionstring="${revision}"
    echo ${revision} | grep '[^[:digit:]]' > /dev/null;
    if [ $? -eq 0 ] ; then
        versionstring="${BRIGHTRED}${versionstring}${NORMAL}"
    fi
    versionstring="r${versionstring}"
    if [ "${branch}" == 'trunk' ] ; then
        echo "(${BRIGHTRED}\342\245\244${NORMAL} ${versionstring})"
    else
        echo "(${DIMRED}\342\213\224${branch}${NORMAL} ${versionstring})"
    fi
}

# Return job information, if more than one job is running

generate_jobs_status() {
    local jobcount=$(jobs | wc -l)
    if [ ${jobcount} -gt 1 ] ; then
        echo " {${BRIGHTBLUE}${jobcount}${NORMAL}} "
    elif [ ${jobcount} -gt 0 ] ; then
        echo " {${DIMBLUE}${jobcount}${NORMAL}} "
    fi
}

# Return VC information, if any exists
generate_vc_status() {
    if [ -d "${PWD}/.svn" ] ; then
        echo " $(generate_svn_status)"
    fi
}

# Generate a "static prompt": one we don't expect to change often.
generate_prompt_static() {
    echo "[$(generate_user_status)@$(generate_host_status)]\$ "
}

# Generate a "dynamic prompt": one we expect to change frequently.
generate_prompt_dynamic() {
    PS1="$(generate_command_status) [$(generate_user_status)@$(generate_host_status) $(generate_dir_status)$(generate_vc_status)]$(generate_jobs_status)\$ "
    history -a
}

# Use generate_escape_sequence to generate our color sequences.
# sc to save cursor position, modifiers, color, rc to restore cursor position

DIMBLACK=$(generate_escape_sequence sc "setaf 0" rc)
DIMRED=$(generate_escape_sequence sc "setaf 1" rc)
DIMGREEN=$(generate_escape_sequence sc "setaf 2" rc)
DIMYELLOW=$(generate_escape_sequence sc "setaf 3" rc)
DIMBLUE=$(generate_escape_sequence sc "setaf 4" rc)
DIMMAGENTA=$(generate_escape_sequence sc "setaf 5" rc)
DIMCYAN=$(generate_escape_sequence sc "setaf 6" rc)
DIMWHITE=$(generate_escape_sequence sc "setaf 7" rc)

BRIGHTBLACK=$(generate_escape_sequence sc bold "setaf 0" rc)
BRIGHTRED=$(generate_escape_sequence sc bold "setaf 1" rc)
BRIGHTGREEN=$(generate_escape_sequence sc bold "setaf 2" rc)
BRIGHTYELLOW=$(generate_escape_sequence sc bold "setaf 3" rc)
BRIGHTBLUE=$(generate_escape_sequence sc bold "setaf 4" rc)
BRIGHTMAGENTA=$(generate_escape_sequence sc bold "setaf 5" rc)
BRIGHTCYAN=$(generate_escape_sequence sc bold "setaf 6" rc)
BRIGHTWHITE=$(generate_escape_sequence sc bold "setaf 7" rc)

NORMAL=$(generate_escape_sequence sc sgr0 rc)

PS1=$(generate_prompt_static)
PROMPT_COMMAND=generate_prompt_dynamic
